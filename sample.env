# Sample Environment Variables for AI Scraping Defense Stack
# Copy this file to .env and customize the values.
# DO NOT commit your actual .env file to version control.

# --- Alerting Configuration (ai_service) ---
ALERT_METHOD=none # Options: none, webhook, slack, smtp
ALERT_GENERIC_WEBHOOK_URL=
ALERT_SLACK_WEBHOOK_URL=
ALERT_SMTP_HOST=
ALERT_SMTP_PORT=587
ALERT_SMTP_USE_TLS=true
ALERT_EMAIL_FROM=
ALERT_EMAIL_TO= # Comma-separated list
ALERT_SMTP_USER=
# ALERT_SMTP_PASSWORD is read from secrets file specified by ALERT_SMTP_PASSWORD_FILE
ALERT_SMTP_PASSWORD_FILE=/run/secrets/smtp_password
ALERT_MIN_REASON_SEVERITY="Local LLM" # Minimum severity reason to trigger alert (e.g., "High Heuristic", "Local LLM", "External API", "IP Reputation")

# --- Escalation Engine Configuration ---
# Webhook URL called by Escalation Engine (should point to ai_service)
ESCALATION_WEBHOOK_URL=http://ai_service:8000/analyze

# Optional Local LLM API (e.g., Ollama, LM Studio)
LOCAL_LLM_API_URL= # e.g., http://host.docker.internal:11434/v1/chat/completions
LOCAL_LLM_MODEL= # e.g., llama3:latest, mistral:latest
LOCAL_LLM_TIMEOUT=45.0

# Optional External Classification API (e.g., commercial bot detection service)
EXTERNAL_CLASSIFICATION_API_URL=
# EXTERNAL_CLASSIFICATION_API_KEY is read from secrets file specified by EXTERNAL_CLASSIFICATION_API_KEY_FILE
EXTERNAL_CLASSIFICATION_API_KEY_FILE=/run/secrets/external_api_key
EXTERNAL_API_TIMEOUT=15.0

# Optional IP Reputation Service Integration (NEW)
ENABLE_IP_REPUTATION=false # Set to true to enable IP reputation checks
IP_REPUTATION_API_URL= # URL of the IP reputation service (e.g., AbuseIPDB, GreyNoise - adapt payload/parsing in code)
# IP_REPUTATION_API_KEY is read from secrets file specified by IP_REPUTATION_API_KEY_FILE
IP_REPUTATION_API_KEY_FILE=/run/secrets/ip_reputation_api_key
IP_REPUTATION_TIMEOUT=10.0
# Adjust scoring based on reputation results (e.g., add this value to score if IP is malicious)
IP_REPUTATION_MALICIOUS_SCORE_BONUS=0.3
# Optional: Minimum score from reputation service to be considered malicious (if applicable)
IP_REPUTATION_MIN_MALICIOUS_THRESHOLD=50

# Optional CAPTCHA Trigger Configuration (NEW - Hooks added, requires separate CAPTCHA service integration)
ENABLE_CAPTCHA_TRIGGER=false # Set to true to enable CAPTCHA challenges for borderline cases
CAPTCHA_SCORE_THRESHOLD_LOW=0.2 # Example: Trigger CAPTCHA if score > this...
CAPTCHA_SCORE_THRESHOLD_HIGH=0.5 # Example: ...and score < this (and not otherwise confirmed bot)
CAPTCHA_VERIFICATION_URL= # URL where your application can serve/verify a CAPTCHA challenge

# --- AI Service Configuration ---
# Optional Community Blocklist Reporting (NEW)
ENABLE_COMMUNITY_REPORTING=false # Set to true to report blocked IPs
COMMUNITY_BLOCKLIST_REPORT_URL= # URL for the community blocklist API (e.g., AbuseIPDB)
# COMMUNITY_BLOCKLIST_API_KEY is read from secrets file specified by COMMUNITY_BLOCKLIST_API_KEY_FILE
COMMUNITY_BLOCKLIST_API_KEY_FILE=/run/secrets/community_blocklist_api_key
COMMUNITY_BLOCKLIST_REPORT_TIMEOUT=10.0

# --- Training Script Configuration (Paths inside container) ---
# These are typically set in docker-compose.yml directly but shown here for completeness
# TRAINING_LOG_FILE_PATH=/app/data/apache_access.log
# TRAINING_DB_PATH=/app/data/log_analysis.db
# TRAINING_MODEL_SAVE_PATH=/app/models/bot_detection_rf_model.joblib
# TRAINING_FINETUNE_DATA_DIR=/app/data/finetuning_data
# TRAINING_ROBOTS_TXT_PATH=/app/config/robots.txt
# TRAINING_HONEYPOT_LOG=/app/logs/honeypot_hits.log
# TRAINING_CAPTCHA_LOG=/app/logs/captcha_success.log

# --- Flask Admin UI Configuration ---
FLASK_ENV=development # Set to 'production' for production deployments

# --- General ---
# (Add any other cross-service configurations here)
