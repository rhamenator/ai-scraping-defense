# requirements.txt
# Dependencies for the AI Scraping Defense Stack
# Run `pip install -r requirements.txt`

# Core web frameworks
fastapi >=0.100.0      # Async web framework for Tarpit, Escalation, AI Service
uvicorn[standard] >=0.20.0 # ASGI server (includes websockets, http-tools)
flask >=2.3.0          # Web framework for Admin UI

# HTTP clients
httpx >=0.24.0         # Async HTTP client for FastAPI services
requests >=2.28.0      # Sync HTTP client (used in ai_service for Slack)

# Data validation & processing
pydantic >=2.0.0       # Data validation for FastAPI

# Machine Learning & Data Handling (Primarily for RAG/Training)
joblib >=1.2.0         # Saving/loading ML models
scikit-learn >=1.2.0   # ML algorithms (RandomForest) and metrics
pandas >=1.5.0         # Data manipulation in training script (can be heavy)
# numpy is usually a dependency of sklearn/pandas

# Text Generation (for Tarpit Markov Generator)
markovify >=0.9.0

# Template engine (for Flask Admin UI)
jinja2 >=3.1.0

# Scheduling (for Tarpit Archive Rotator)
schedule >=1.1.0

# Redis client (for Blocklisting, IP Flagging, Frequency Tracking)
redis >=4.5.0

# User-Agent Parsing (Optional but recommended for better features)
user-agents >=0.4.0

# Email Validation (Optional, for entropy scanner)
# No direct external library needed for the provided entropy logic

# --- Optional Dependencies for Advanced Features ---

# LLM Fine-tuning (Resource Intensive - Requires GPU recommended)
# Install these only if running rag/finetune.py
# transformers >=4.30.0
# datasets >=2.14.0
# evaluate >=0.4.0
# accelerate >=0.21.0 # For distributed/mixed-precision training
# torch >=2.0.0      # Or tensorflow if preferred backend

# Local LLM Backend Interface (If calling local models directly from Python)
# llama-cpp-python >=0.2.0 # For GGUF models via llama.cpp

# Alerting Integrations
# slack_sdk >=3.20.0 # If implementing Slack alerts via dedicated SDK (requests is used currently)

# Other Utilities
# beautifulsoup4 >=4.11.0 # If scraping web pages for Markov corpus

# IP Reputation Services (Optional - Current implementation uses generic httpx)
# Consider specific client libraries if needed for advanced features of services like:
# abuseipdb-client
# greynoise

# CAPTCHA Integration (Optional - Current implementation only has hooks)
# Libraries would depend on the chosen CAPTCHA provider, e.g.:
# recaptcha-client (for Google reCAPTCHA)
# hcaptcha

# --- Security & Best Practices ---
# Consider using `pip-tools` (`pip-compile`) to pin dependencies for reproducible builds:
# https://github.com/jazzband/pip-tools
# Regularly update dependencies to patch security vulnerabilities:
# `pip list --outdated`
# `pip install -U <package_name>` or `pip-compile --upgrade`
# Consider using security scanning tools like `pip-audit` or GitHub Dependabot.

