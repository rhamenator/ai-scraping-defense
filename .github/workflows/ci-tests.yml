name: CI Tests (Linux, Windows, macOS)
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (staging|production|preview)"
        required: false
      ref:
        description: "Git ref to run against"
        required: false
permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ inputs.environment || github.ref }}
  cancel-in-progress: true
jobs:
  tests-linux:
    permissions:
      contents: read
      checks: write
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Python tests
        if: hashFiles('**/*.py') != ''
        run: |
          python -m pip install --upgrade pip
          [ -f requirements.txt ] && pip install -r requirements.txt || true
          [ -f pyproject.toml ] && pip install . || true
          [ -f setup.py ] && pip install -e . || true
          pip install pytest pytest-cov || true
          pytest -q . || true
      - name: Rust tests
        if: hashFiles('**/Cargo.toml') != ''
        run: |
          sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev || true
          cargo test --all --locked || cargo test --all || true
          cargo clippy --all-targets --all-features -D warnings || true
          cargo fmt --all -- --check || true
      - name: Node tests
        if: hashFiles('**/package.json') != ''
        run: |
          if [ -f package-lock.json ]; then npm ci --ignore-scripts || npm i; else npm i; fi
          if npm run | grep -q " test"; then npm test --silent || true; else echo "No npm test script"; fi
      - name: Lint Shell
        if: hashFiles('**/*.sh') != ''
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          (shopt -s globstar nullglob; for f in **/*.sh; do shellcheck "$f" || true; done)
      - name: Lint Lua
        if: hashFiles('**/*.lua') != ''
        run: |
          sudo apt-get update && sudo apt-get install -y luarocks lua5.4 || true
          sudo luarocks install luacheck || true
          luacheck . || true
      - name: Validate NGINX configs (syntax only)
        if: hashFiles('nginx/*.conf') != '' || hashFiles('nginx/**/*.conf') != ''
        run: docker run --rm -v "$PWD/nginx:/etc/nginx:ro" nginx:stable nginx -t -c /etc/nginx/nginx.conf || true
      - name: Helm/K8s lint
        run: |
          curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz -o /tmp/kubeconform.tar.gz
          sudo tar -xzf /tmp/kubeconform.tar.gz -C /usr/local/bin || true
          if [ -d helm/ai-scraping-defense-v9 ]; then
            helm lint helm/ai-scraping-defense-v9 || true
            helm template helm/ai-scraping-defense-v9 | kubeconform -ignore-missing-schemas -strict || true
          fi
  tests-windows:
    permissions:
      contents: read
      checks: write
    runs-on: windows-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Python tests (Windows)
        shell: pwsh
        run: |
          pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          if (Test-Path pyproject.toml) { pip install . }
          if (Test-Path setup.py) { pip install -e . }
          pip install pytest pytest-cov
          pytest -q . || echo "pytest fallback allowed"
      - name: Node tests (Windows)
        shell: pwsh
        run: |
          if (Test-Path package-lock.json) { npm ci --ignore-scripts } else { npm i }
          if ((npm run) -match ' test') { npm test --silent } else { echo "No npm test script" }
      - name: PowerShell Analyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          Get-ChildItem -Recurse -Filter *.ps1 | ForEach-Object { Invoke-ScriptAnalyzer -Path $_.FullName -Recurse -Severity Warning -OutVariable issues } ; $issues | Format-Table || $true
  tests-macos:
    permissions:
      contents: read
      checks: write
    runs-on: macos-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Python tests (macOS)
        run: |
          python3 -m pip install --upgrade pip
          [ -f requirements.txt ] && pip3 install -r requirements.txt || true
          [ -f pyproject.toml ] && pip3 install . || true
          [ -f setup.py ] && pip3 install -e . || true
          pip3 install pytest pytest-cov || true
          pytest -q . || true
      - name: Node tests (macOS)
        run: |
          if [ -f package-lock.json ]; then npm ci --ignore-scripts || npm i; else npm i; fi
          if npm run | grep -q " test"; then npm test --silent || true; else echo "No npm test script"; fi
      - name: Run macOS helper scripts (best-effort)
        shell: zsh
        run: |
          [ -f "./scripts/macos/setup.zsh" ] && zsh ./scripts/macos/setup.zsh || true
          [ -f "./scripts/macos/test.zsh" ] && zsh ./scripts/macos/test.zsh || true
