name: CI-CD Pipeline
# Controls when the workflow will run
on:
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub UI
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

permissions:
  contents: read

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: python -m pytest

      # Optional Docker image build/push steps (commented out)
      # - name: Build and push Docker images
      #   run: |
      #     docker build -t your-repo/ai-service:latest ./ai_service
      #     docker push your-repo/ai-service:latest

  deploy:
    permissions:
      contents: read
      deployments: write
    needs: build_and_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v4
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          echo "ðŸš€ Starting deployment to Kubernetes..."
          kubectl apply -f kubernetes/namespace.yaml
          kubectl apply -f kubernetes/configmap.yaml
          kubectl apply -f kubernetes/secrets.yaml
          kubectl apply -f kubernetes/postgres-init-script-cm.yaml
          kubectl apply -f kubernetes/archives-pvc.yaml
          kubectl apply -f kubernetes/corpus-pvc.yaml
          kubectl apply -f kubernetes/models-pvc.yaml
          kubectl apply -f kubernetes/postgres-statefulset.yaml
          kubectl apply -f kubernetes/redis-statefulset.yaml
          kubectl apply -f kubernetes/admin-ui-deployment.yaml
          kubectl apply -f kubernetes/ai-service-deployment.yaml
          kubectl apply -f kubernetes/archive-rotator-deployment.yaml
          kubectl apply -f kubernetes/escalation-engine-deployment.yaml
          kubectl apply -f kubernetes/nginx-deployment.yaml
          kubectl apply -f kubernetes/tarpit-api-deployment.yaml
          kubectl apply -f kubernetes/corpus-updater-cronjob.yaml
          kubectl apply -f kubernetes/markov-model-trainer.yaml
          kubectl apply -f kubernetes/robots-fetcher-cronjob.yaml
          echo "âœ… Deployment complete."
