# This GitHub Actions workflow defines the Continuous Integration (CI) and
# Continuous Deployment (CD) pipeline for the project.
name: CI-CD Pipeline

# Controls when the workflow will run
on:
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub UI
  # Uncomment the lines below to enable automatic runs on push or pull request events
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

jobs:
  # This job builds the Docker images and runs tests
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Log in to a Docker registry (e.g., Docker Hub, GHCR)
      # You would need to add DOCKER_USERNAME and DOCKER_PASSWORD as secrets
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: python -m pytest

      # In a real-world scenario, you would have steps here to build and push
      # your Docker images to a container registry.
      # - name: Build and push Docker images
      #   run: |
      #     docker build -t your-repo/ai-service:latest ./ai_service
      #     docker push your-repo/ai-service:latest
      #     # ... repeat for all services

  # This job deploys the application to Kubernetes
  deploy:
    # This job will only run after the 'build_and_test' job completes successfully
    needs: build_and_test
    # This condition ensures the deployment only happens on a direct push to the 'main' branch,
    # not on pull request builds.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          # KUBECONFIG is a secret containing the kubeconfig file content for your cluster.
          # You must add this secret to your GitHub repository settings:
          # Settings > Secrets and variables > Actions > New repository secret
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          echo "ðŸš€ Starting deployment to Kubernetes..."
          
          # The deployment steps are ordered to ensure dependencies are met.
          echo "1. Applying namespace..."
          kubectl apply -f kubernetes/namespace.yaml

          echo "2. Applying ConfigMaps and Secrets..."
          kubectl apply -f kubernetes/configmap.yaml
          kubectl apply -f kubernetes/secrets.yaml
          kubectl apply -f kubernetes/postgres-init-script-cm.yaml

          echo "3. Applying PersistentVolumeClaims..."
          kubectl apply -f kubernetes/archives-pvc.yaml
          kubectl apply -f kubernetes/corpus-pvc.yaml
          kubectl apply -f kubernetes/models-pvc.yaml

          echo "4. Applying stateful services..."
          kubectl apply -f kubernetes/postgres-statefulset.yaml
          kubectl apply -f kubernetes/redis-statefulset.yaml

          echo "5. Applying application deployments..."
          kubectl apply -f kubernetes/admin-ui-deployment.yaml
          kubectl apply -f kubernetes/ai-service-deployment.yaml
          kubectl apply -f kubernetes/archive-rotator-deployment.yaml
          kubectl apply -f kubernetes/escalation-engine-deployment.yaml
          kubectl apply -f kubernetes/nginx-deployment.yaml
          kubectl apply -f kubernetes/tarpit-api-deployment.yaml

          echo "6. Applying jobs and cronjobs..."
          kubectl apply -f kubernetes/corpus-updater-cronjob.yaml
          kubectl apply -f kubernetes/markov-model-trainer.yaml
          kubectl apply -f kubernetes/robots-fetcher-cronjob.yaml
          
          echo "âœ… Deployment complete."
