#!/bin/bash
#
# generate-secrets.sh (Updated for Kubernetes)
#
# This script creates a single, ready-to-use Kubernetes secrets manifest.
# It generates strong random passwords, creates Nginx htpasswd credentials,
# base64-encodes all values, assembles them into one YAML file, and
# outputs the generated credentials to the console for the administrator.

# --- Configuration ---
# Set colors for output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Ensure the 'kubernetes' directory exists relative to the script's location
K8S_DIR="$(dirname "$0")/kubernetes"
mkdir -p "$K8S_DIR"
OUTPUT_FILE="$K8S_DIR/secrets.yaml"

# --- Functions ---
# Function to generate a strong, random password.
# It uses /dev/urandom for cryptographic randomness and filters for URL-safe characters plus some specials.
generate_password() {
    LC_ALL=C tr -dc 'A-Za-z0-9_!@#$%^&*' < /dev/urandom | head -c "${1:-24}"
}

# --- Main Logic ---
echo -e "${CYAN}Generating secrets for Kubernetes...${NC}"

# 1. Generate all required secret values
POSTGRES_USER="postgres"
POSTGRES_DB="markov_db"
POSTGRES_PASSWORD=$(generate_password)
REDIS_PASSWORD=$(generate_password)

# Use the current user's name for the admin UI for better security.
# SUDO_USER is used as a fallback if the script is run with sudo.
ADMIN_UI_USERNAME=${SUDO_USER:-$USER}
if [ -z "$ADMIN_UI_USERNAME" ]; then
    ADMIN_UI_USERNAME="defense-admin"
fi
ADMIN_UI_PASSWORD=$(generate_password)

SYSTEM_SEED=$(generate_password 48)
EXTERNAL_API_KEY=$(generate_password)
IP_REPUTATION_API_KEY=$(generate_password)
COMMUNITY_BLOCKLIST_API_KEY=$(generate_password)
SMTP_PASSWORD=$(generate_password)

# 2. Generate Nginx .htpasswd secret
NGINX_USERNAME="$ADMIN_UI_USERNAME"
NGINX_PASSWORD=$(generate_password 32)
# Create the SHA1 hash of the password, then Base64 encode it, which is the htpasswd format
HASH_B64=$(echo -n "$NGINX_PASSWORD" | openssl dgst -sha1 -binary | base64)
HTPASSWD_FILE_CONTENT="${NGINX_USERNAME}:{SHA}${HASH_B64}"

# 3. Write the YAML content to the output file using a Here Document
# The `tr -d '\n'` command for base64 is important on some systems (like macOS)
# to avoid extra newlines in the encoded string.
cat > "$OUTPUT_FILE" << EOL
# kubernetes/secrets.yaml
#
# GENERATED BY SCRIPT - DO NOT EDIT MANUALLY
# This file contains sensitive data. DO NOT commit it to version control.
# Ensure 'kubernetes/secrets.yaml' is in your .gitignore file.
#
# To apply, run: kubectl apply -f kubernetes/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: ai-defense
type: Opaque
data:
  POSTGRES_USER: $(echo -n "$POSTGRES_USER" | base64 | tr -d '\n')
  POSTGRES_DB: $(echo -n "$POSTGRES_DB" | base64 | tr -d '\n')
  POSTGRES_PASSWORD: $(echo -n "$POSTGRES_PASSWORD" | base64 | tr -d '\n')
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: ai-defense
type: Opaque
data:
  REDIS_PASSWORD: $(echo -n "$REDIS_PASSWORD" | base64 | tr -d '\n')
---
apiVersion: v1
kind: Secret
metadata:
  name: admin-ui-credentials
  namespace: ai-defense
type: Opaque
data:
  ADMIN_UI_USERNAME: $(echo -n "$ADMIN_UI_USERNAME" | base64 | tr -d '\n')
  ADMIN_UI_PASSWORD: $(echo -n "$ADMIN_UI_PASSWORD" | base64 | tr -d '\n')
---
apiVersion: v1
kind: Secret
metadata:
  name: system-seed-secret
  namespace: ai-defense
type: Opaque
data:
  SYSTEM_SEED: $(echo -n "$SYSTEM_SEED" | base64 | tr -d '\n')
---
apiVersion: v1
kind: Secret
metadata:
  name: external-api-keys
  namespace: ai-defense
type: Opaque
data:
  EXTERNAL_API_KEY: $(echo -n "$EXTERNAL_API_KEY" | base64 | tr -d '\n')
  IP_REPUTATION_API_KEY: $(echo -n "$IP_REPUTATION_API_KEY" | base64 | tr -d '\n')
  COMMUNITY_BLOCKLIST_API_KEY: $(echo -n "$COMMUNITY_BLOCKLIST_API_KEY" | base64 | tr -d '\n')
  SMTP_PASSWORD: $(echo -n "$SMTP_PASSWORD" | base64 | tr -d '\n')
---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-auth
  namespace: ai-defense
type: Opaque
data:
  .htpasswd: $(echo -n "$HTPASSWD_FILE_CONTENT" | base64 | tr -d '\n')
EOL

# 4. Output the results to the user
echo -e "\nSuccessfully created Kubernetes secrets file at:"
echo -e "${GREEN}${OUTPUT_FILE}${NC}"
echo -e "${YELLOW}------------------------------------------------------------${NC}"
echo -e "${YELLOW}IMPORTANT: Save the following credentials in a secure place!${NC}"
echo -e "${YELLOW}------------------------------------------------------------${NC}"
echo ""
echo -e "${CYAN}NGINX / Admin UI Credentials (for browser access):${NC}"
echo "  Username: $NGINX_USERNAME"
echo "  Password: $NGINX_PASSWORD"
echo ""
echo -e "${CYAN}Service Passwords & Keys (for config and troubleshooting):${NC}"
echo "  PostgreSQL Password: $POSTGRES_PASSWORD"
echo "  Redis Password:      $REDIS_PASSWORD"
echo "  System Seed:         $SYSTEM_SEED"
echo ""
echo -e "${YELLOW}------------------------------------------------------------${NC}"
echo -e "${YELLOW}After saving these values, clear your screen history.${NC}"
echo -e "${YELLOW}Remember to add 'kubernetes/secrets.yaml' to your .gitignore file.${NC}"

