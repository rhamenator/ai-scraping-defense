
services:
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - defense_network
    restart: unless-stopped

  mock_external_api:
    image: stoplight/prism:4
    container_name: mock_external_api
    command: mock -h 0.0.0.0 /mocks/external_api.yaml
    volumes:
      - ./mocks/external_api.yaml:/mocks/external_api.yaml:ro
    ports:
      - "8000:8000"
    networks:
      - defense_network
    restart: unless-stopped

  mock_ip_reputation_api:
    image: stoplight/prism:4
    container_name: mock_ip_reputation_api
    command: mock -h 0.0.0.0 /mocks/ip_reputation_api.yaml
    volumes:
      - ./mocks/ip_reputation_api.yaml:/mocks/ip_reputation_api.yaml:ro
    ports:
      - "8004:8000" # Updated to avoid port conflict
    networks:
      - defense_network
    restart: unless-stopped

  mock_community_blocklist_api:
    image: stoplight/prism:4
    container_name: mock_community_blocklist_api
    command: mock -h 0.0.0.0 /mocks/community_blocklist_api.yaml
    volumes:
      - ./mocks/community_blocklist_api.yaml:/mocks/community_blocklist_api.yaml:ro
    ports:
      - "8002:8000"
    networks:
      - defense_network
    restart: unless-stopped

  # --- Main Application Services ---
  nginx_proxy:  # Changed from 'nginx' to 'nginx_proxy' to match container name
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nginx_proxy
    user: nobody  # Add this to match Dockerfile
    entrypoint: [] # Bypass the docker-entrypoint.sh from Dockerfile
    command: ["/usr/local/openresty/nginx/sbin/nginx", "-g", "daemon off;"]
    ports:
      - "${NGINX_HTTP_PORT:-8080}:80"
      - "${NGINX_HTTPS_PORT:-8443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/lua:/etc/nginx/lua:ro
      - ./config/robots.txt:/etc/nginx/robots.txt:ro
      - ./docs:/var/www/html/docs:ro
      - ./archives:/usr/share/nginx/html/archives:ro
      - ./logs/nginx:/var/log/nginx
      - ./certs:/etc/nginx/certs:ro
      - ./secrets/.htpasswd:/etc/nginx/secrets/.htpasswd:ro
    depends_on:
      tarpit_api:
        condition: service_healthy
      escalation_engine:
        condition: service_healthy
      admin_ui:
        condition: service_healthy
      ai_service:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB_BLOCKLIST=2
      - REAL_BACKEND_HOST=${REAL_BACKEND_HOST:-http://your-real-app-service:8080}
      # Add these for Lua paths
      - LUA_PATH=/usr/local/openresty/lualib/?.lua;/usr/local/openresty/nginx/lua/?.lua;/etc/nginx/lua/?.lua;;
      - LUA_CPATH=/usr/local/openresty/lualib/?.so;;
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  ai_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_service
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    command: ["uvicorn", "ai_service.ai_webhook:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "${UVICORN_WORKERS:-2}"]
    environment:
      - PYTHONPATH=/app
      - ALERT_SMTP_HOST=mailhog
      - ALERT_SMTP_PORT=1025
    volumes:
      - ./ai_service:/app/ai_service
      - ./shared:/app/shared
      - ./metrics.py:/app/metrics.py:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./util:/app/util
    secrets:
      - smtp_password
      - community_blocklist_api_key
      - redis_password
    depends_on:
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  escalation_engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: escalation_engine
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    command: ["uvicorn", "escalation.escalation_engine:app", "--host", "0.0.0.0", "--port", "8003", "--workers", "${UVICORN_WORKERS:-2}"]
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./escalation:/app/escalation
      - ./shared:/app/shared
      - ./metrics.py:/app/metrics.py:ro
      - ./models:/app/models:ro
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./util:/app/util
    secrets:
      - external_api_key
      - ip_reputation_api_key
      - redis_password
    depends_on:
      ai_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  tarpit_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tarpit_api
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    command: ["uvicorn", "tarpit.tarpit_api:app", "--host", "0.0.0.0", "--port", "8005", "--workers", "${UVICORN_WORKERS:-2}"] # Updated port
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./tarpit:/app/tarpit
      - ./shared:/app/shared
      - ./metrics.py:/app/metrics.py:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./util:/app/util
    secrets:
      - pg_password
      - redis_password
      - system_seed
    depends_on:
      escalation_engine:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8005/health || exit 1"] # Updated port
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  admin_ui:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: admin_ui
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    command: ["python", "admin_ui/admin_ui.py"]
    environment:
      - PYTHONPATH=/app
      - FLASK_ENV=${FLASK_ENV:-production}
    volumes:
      - ./admin_ui:/app/admin_ui
      - ./shared:/app/shared
      - ./metrics.py:/app/metrics.py:ro
      - ./logs:/app/logs
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://admin_ui:5002/ || exit 1"] # Updated to use internal network hostname
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  archive_rotator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: archive_rotator
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    command: ["python", "tarpit/rotating_archive.py"]
    environment:
      - PYTHONPATH=/app
      - DEFAULT_ARCHIVE_DIR=/app/fake_archives
    volumes:
      - ./tarpit:/app/tarpit
      - ./archives:/app/fake_archives
      - ./logs:/app/logs
    networks:
      - defense_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis_store
    volumes:
      - redis_data:/data
    networks:
      - defense_network
    restart: unless-stopped
    command: >
      sh -c 'if [ -f /run/secrets/redis_password.txt ] && [ -s /run/secrets/redis_password.txt ]; then \
               echo "Starting Redis with password protection."; \
               exec redis-server --save 60 1 --loglevel warning --requirepass "$(cat /run/secrets/redis_password.txt)"; \
             else \
               echo "Starting Redis without password protection (password file not found or empty)."; \
               exec redis-server --save 60 1 --loglevel warning; \
             fi'
    secrets:
      - source: redis_password
        target: /run/secrets/redis_password.txt
        mode: 0400
    healthcheck:
      test: >
        sh -c 'if [ -f /run/secrets/redis_password.txt ] && [ -s /run/secrets/redis_password.txt ]; then \
                 redis-cli -a "$(cat /run/secrets/redis_password.txt)" ping | grep -q PONG; \
               else \
                 redis-cli ping | grep -q PONG; \
               fi'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  postgres:
    image: postgres:15-alpine
    container_name: postgres_markov_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init_markov.sql:/docker-entrypoint-initdb.d/init_markov.sql:ro
    environment:
      - POSTGRES_DB=${PG_DBNAME:-markovdb}
      - POSTGRES_USER=${PG_USER:-markovuser}
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password.txt
    secrets:
      - source: pg_password
        target: /run/secrets/pg_password.txt
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-markovuser} -d $${POSTGRES_DB:-markovdb} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  corpus_updater:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: corpus_updater
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    command: ["python", "util/corpus_wikipedia_updater.py"]
    environment:
      - PYTHONPATH=/app
      - WIKIPEDIA_CORPUS_FILE=/app/data/wikipedia_corpus.txt
      - WIKIPEDIA_NUM_ARTICLES=${WIKIPEDIA_NUM_ARTICLES:-5}
      - WIKIPEDIA_LANGUAGE=${WIKIPEDIA_LANGUAGE:-en}
    volumes:
      - ./util:/app/util
      - ./data:/app/data
    networks:
      - defense_network

  robots_fetcher:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: robots_fetcher
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    command: ["python", "util/robots_fetcher.py"]
    environment:
      - PYTHONPATH=/app
      - REAL_BACKEND_HOST=${REAL_BACKEND_HOST_FOR_ROBOTS:-http://your-real-app-service:8080}
    volumes:
      - ./util:/app/util
    networks:
      - defense_network

  markov_trainer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: markov_trainer
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    # Command specified when running: docker-compose run --rm markov_trainer python rag/train_markov_postgres.py /app/data/your_corpus_file.txt
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./rag:/app/rag
      - ./data:/app/data
    secrets:
      - pg_password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - defense_network

  model_trainer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: model_trainer
    working_dir: /app
    entrypoint: [] # Bypass the docker-entrypoint.sh
    # Command: python rag/training.py
    # Run manually: docker-compose run --rm model_trainer python rag/training.py
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./rag:/app/rag
      - ./shared:/app/shared
      - ./metrics.py:/app/metrics.py:ro
      - ./models:/app/models
      - ./data:/app/data
      - ./config:/app/config
      - ./logs:/app/logs
    secrets:
      - training_pg_password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - defense_network
  
networks:
  defense_network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:

secrets:
  smtp_password:
    file: ./secrets/smtp_password.txt
  external_api_key:
    file: ./secrets/external_api_key.txt
  ip_reputation_api_key:
    file: ./secrets/ip_reputation_api_key.txt
  community_blocklist_api_key:
    file: ./secrets/community_blocklist_api_key.txt
  pg_password:
    file: ./secrets/pg_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  system_seed:
    file: ./secrets/system_seed.txt
  training_pg_password:
    file: ./secrets/training_pg_password.txt
