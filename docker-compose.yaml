# docker-compose.yaml (v4 - Final)
#
# This version combines the clean .env configuration with the robust
# stability settings (healthchecks, cache volumes) from the original file.
# It represents the best of both worlds.

services:
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "${ALERT_SMTP_PORT:-1025}:1025"
      - "${ALERT_SMTP_WEB_PORT:-8025}:8025"
    networks:
      - defense_network
    restart: unless-stopped

  mock_external_api:
    image: stoplight/prism:4
    container_name: mock_external_api
    command: mock -h 0.0.0.0 /mocks/external_api.yaml
    volumes:
      - ./mocks/external_api.yaml:/mocks/external_api.yaml:ro
    ports:
      - "4010:4010"
    networks:
      - defense_network
    restart: unless-stopped

  nginx_proxy:
    image: openresty/openresty:1.21.4.1-alpine
    container_name: nginx_proxy
    user: nobody
    ports:
      - "${NGINX_HTTP_PORT:-8080}:80"
      - "${NGINX_HTTPS_PORT:-8443}:443"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NGINX_HTTP_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template:ro
      - ./nginx/lua:/etc/nginx/lua:ro
      # Restored Nginx cache volumes for stability and performance
      - nginx_client_body_temp:/var/run/openresty/nginx-client-body
      - nginx_proxy_temp:/var/cache/nginx/proxy_temp
      - nginx_fastcgi_temp:/var/cache/nginx/fastcgi_temp
      - nginx_uwsgi_temp:/var/cache/nginx/uwsgi_temp
      - nginx_scgi_temp:/var/cache/nginx/scgi_temp
    environment:
      - LUA_PATH=/usr/local/openresty/lualib/?.lua;;
      - AI_SERVICE_HOST=ai_service
      - ESCALATION_ENGINE_HOST=escalation_engine
      - TARPIT_API_HOST=tarpit_api
      - ADMIN_UI_HOST=admin_ui
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      escalation_engine:
        condition: service_healthy
      tarpit_api:
        condition: service_healthy
      admin_ui:
        condition: service_healthy
    networks:
      - defense_network
    restart: unless-stopped

  ai_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_service
    command: ["uvicorn", "src.ai_service.ai_webhook:app", "--host", "0.0.0.0", "--port", "${AI_SERVICE_PORT:-8000}"]
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - escalation_engine
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${AI_SERVICE_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  escalation_engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: escalation_engine
    entrypoint: ["/app/docker-entrypoint.sh"]
    command: ["uvicorn", "src.escalation.escalation_engine:app", "--host", "0.0.0.0", "--port", "${ESCALATION_ENGINE_PORT:-8003}"]
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./data:/app/data
      - ./docker-entrypoint.sh:/app/docker-entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ESCALATION_ENGINE_PORT:-8003}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  tarpit_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tarpit_api
    command: ["uvicorn", "src.tarpit.tarpit_api:app", "--host", "0.0.0.0", "--port", "${TARPIT_API_PORT:-8001}"]
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./archives:/app/archives
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${TARPIT_API_PORT:-8001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin_ui:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: admin_ui
    command: ["python", "src/admin_ui/admin_ui.py"]
    env_file:
      - .env
    ports:
      - "${ADMIN_UI_PORT:-5002}:5002"
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ADMIN_UI_PORT:-5002}/"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: postgres_markov_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init_markov.sql:/docker-entrypoint-initdb.d/init_markov.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${PG_PORT:-5432}:5432"
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_store
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - defense_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  defense_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  nginx_client_body_temp:
  nginx_proxy_temp:
  nginx_fastcgi_temp:
  nginx_uwsgi_temp:
  nginx_scgi_temp:
