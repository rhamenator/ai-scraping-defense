# kubernetes/postgres-init-script-cm.yaml
# This ConfigMap holds the SQL script to initialize the PostgreSQL database schema.
# The PostgreSQL container will automatically execute this script on its first run
# if the data directory is empty, because it's mounted into /docker-entrypoint-initdb.d/
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script-cm
  namespace: ai-defense
data:
  init_markov.sql: |
    -- anti_scrape/db/init_markov.sql
    -- Schema for PostgreSQL Markov chain storage

    -- Table to store unique words/tokens
    CREATE TABLE IF NOT EXISTS markov_words (
        id SERIAL PRIMARY KEY,
        word TEXT UNIQUE NOT NULL
    );

    -- Create index for faster word lookup
    CREATE INDEX IF NOT EXISTS idx_markov_words_word ON markov_words (word);

    -- Insert the empty string as a special token (ID 1 if table is empty)
    -- This ensures that ID 1 is consistently the empty string, important for the logic.
    INSERT INTO markov_words (id, word) VALUES (1, '')
    ON CONFLICT (id) DO UPDATE SET word = EXCLUDED.word
    WHERE markov_words.id = 1; -- Only update if ID 1 already exists but word is different
    INSERT INTO markov_words (word) VALUES ('')
    ON CONFLICT (word) DO NOTHING; -- Ensure '' exists if ID 1 was taken by something else (less likely)


    -- Table to store sequences (word1_id -> word2_id -> next_word_id) and frequency
    CREATE TABLE IF NOT EXISTS markov_sequences (
        p1 INT NOT NULL REFERENCES markov_words(id) ON DELETE CASCADE, -- Added ON DELETE CASCADE
        p2 INT NOT NULL REFERENCES markov_words(id) ON DELETE CASCADE, -- Added ON DELETE CASCADE
        next_id INT NOT NULL REFERENCES markov_words(id) ON DELETE CASCADE, -- Added ON DELETE CASCADE
        freq INT DEFAULT 1 NOT NULL,
        -- Constraint to ensure combination of p1, p2, next_id is unique
        CONSTRAINT uq_sequence UNIQUE (p1, p2, next_id)
    );

    -- Index for fast lookup of next possible words based on previous two
    CREATE INDEX IF NOT EXISTS idx_markov_sequences_prev ON markov_sequences (p1, p2);

    -- Optional: Index for frequency-based lookups if needed
    CREATE INDEX IF NOT EXISTS idx_markov_sequences_freq ON markov_sequences (p1, p2, freq DESC);

    -- Grant usage on sequence if not default for the user
    -- This might be needed if the markovuser doesn't own the schema or sequence by default.
    -- GRANT USAGE, SELECT ON SEQUENCE markov_words_id_seq TO markovuser; -- Replace markovuser if different
