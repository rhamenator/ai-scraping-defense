# kubernetes/secrets.yaml
# Defines Kubernetes Secrets for sensitive configuration.
#
# IMPORTANT: Replace placeholder values in 'data' fields with your actual
# base64-encoded secrets before applying this manifest.
# You can generate base64 values using: echo -n 'YOUR_SECRET_VALUE' | base64
#
# Alternatively, create secrets manually using kubectl:
# kubectl create secret generic <secret-name> --from-literal=<key>=<value>
# e.g., kubectl create secret generic smtp-credentials --from-literal=smtp_password='YOUR_SMTP_PASSWORD'
#
# Consider using a more robust secrets management solution like HashiCorp Vault
# or cloud provider secret managers (AWS Secrets Manager, GCP Secret Manager, Azure Key Vault)
# with appropriate integrations (e.g., CSI driver) for production environments.

apiVersion: v1
kind: Secret
metadata:
  name: smtp-credentials
  # Consider adding namespace: ai-defense
type: Opaque
data:
  # Key name matches what the app expects via ALERT_SMTP_PASSWORD_FILE mount path
  # Base64 encoded value of your SMTP password
  smtp_password: WU9VUl9TTVRQX1BBU1NXT1JEX0hFUkU= # echo -n 'YOUR_SMTP_PASSWORD_HERE' | base64

---
apiVersion: v1
kind: Secret
metadata:
  name: external-api-credentials
  # Consider adding namespace: ai-defense
type: Opaque
data:
  # Key name matches what the app expects via EXTERNAL_CLASSIFICATION_API_KEY_FILE mount path
  # Base64 encoded value of your External Classification API Key
  external_api_key: WU9VUl9FWFRFUk5BTF9BUElfS0VZX0hFUkU= # echo -n 'YOUR_EXTERNAL_API_KEY_HERE' | base64

---
apiVersion: v1
kind: Secret
metadata:
  name: ip-reputation-credentials
  # Consider adding namespace: ai-defense
type: Opaque
data:
  # Key name matches what the app expects via IP_REPUTATION_API_KEY_FILE mount path
  # Base64 encoded value of your IP Reputation API Key
  ip_reputation_api_key: WU9VUl9JUF9SRVBVVEFUSU9OX0FQSV9LRVlfSEVSRQ== # echo -n 'YOUR_IP_REPUTATION_API_KEY_HERE' | base64

---
apiVersion: v1
kind: Secret
metadata:
  name: community-blocklist-credentials
  # Consider adding namespace: ai-defense
type: Opaque
data:
  # Key name matches what the app expects via COMMUNITY_BLOCKLIST_API_KEY_FILE mount path
  # Base64 encoded value of your Community Blocklist Reporting API Key
  community_blocklist_api_key: WU9VUl9DT01NVU5JVFlfQkxPQ0tMSVNUX0FQSV9LRVlfSEVSRQ== # echo -n 'YOUR_COMMUNITY_BLOCKLIST_API_KEY_HERE' | base64

# Add other secrets as needed (e.g., database passwords if not using Redis, etc.)

