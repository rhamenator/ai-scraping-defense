# kubernetes/archive-rotator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: archive-rotator
  namespace: ai-defense
  labels:
    app: archive-rotator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: archive-rotator
  template:
    metadata:
      labels:
        app: archive-rotator
    spec:
      securityContext: # Pod-level security context
        runAsNonRoot: true
        fsGroup: 1001 # Script writes to PVC, ensure group ownership matches runAsUser or is writable by this GID
      containers:
      - name: archive-rotator
        image: defense_stack_py_base:v0.1.0
        imagePullPolicy: IfNotPresent
        securityContext: # Container-level security context
          allowPrivilegeEscalation: false
          runAsUser: 1001
          capabilities:
            drop:
              - "ALL"
          # readOnlyRootFilesystem: false # Needs to write to PVC mount
        workingDir: /app
        command: ["python", "tarpit/rotating_archive.py"]
        env:
          - name: DEFAULT_ARCHIVE_DIR
            value: "/app/fake_archives_on_pvc" # This is the mountPath for the PVC
        resources:
          requests: { cpu: "50m", memory: "64Mi" }
          limits: { cpu: "250m", memory: "128Mi" }
        volumeMounts:
          - name: archives-volume
            mountPath: /app/fake_archives_on_pvc # Script writes here
          - name: log-volume
            mountPath: /app/logs # Script user 1001 needs write access
      volumes:
        - name: log-volume
          emptyDir: {}
        - name: archives-volume
          persistentVolumeClaim:
            claimName: archives-pvc
