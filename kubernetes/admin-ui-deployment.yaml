# kubernetes/admin-ui-deployment.yaml
# Defines the Deployment and Service for the Admin UI (Flask application).

apiVersion: v1
kind: Service
metadata:
  name: admin-ui # Service name used by Nginx proxy_pass
  # Consider adding namespace: ai-defense
  labels:
    app: admin-ui
spec:
  selector:
    app: admin-ui # Selects pods with this label
  ports:
    - protocol: TCP
      port: 5002 # Port the service listens on within the cluster
      targetPort: http-admin # Matches the container port name
      name: http
  type: ClusterIP # Only reachable internally

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-ui
  # Consider adding namespace: ai-defense
  labels:
    app: admin-ui
spec:
  replicas: 1 # Start with one replica, can be scaled later
  selector:
    matchLabels:
      app: admin-ui
  template:
    metadata:
      labels:
        app: admin-ui
    spec:
      containers:
      - name: admin-ui
        # IMPORTANT: Replace 'defense_stack_py_base' with the actual image name
        # built by your Dockerfile process if it's different or pushed to a registry.
        image: defense_stack_py_base:latest
        imagePullPolicy: IfNotPresent # Or Always if using :latest tag frequently
        workingDir: /app
        command: ["python", "admin_ui/admin_ui.py"]
        ports:
        - containerPort: 5002
          name: http-admin # Name for the container port
        envFrom: # Inject all variables from the ConfigMap
          - configMapRef:
              name: app-config # Reference the ConfigMap created earlier
        # Optional: Define specific env vars if needed, overriding ConfigMap
        # env:
        # - name: FLASK_ENV # Example override
        #   value: "production"
        resources:
          # Adjust based on monitoring - values from docker-compose
          requests:
            cpu: "100m" # Start lower than limit
            memory: "128Mi"
          limits:
            cpu: "250m"
            memory: "256Mi"
        volumeMounts:
          # Option 1: Assume code is built into the image (simplest for K8s)
          # No volume mounts needed for /app/admin_ui, /app/shared, /app/metrics.py

          # Option 2: Mount code/config via PersistentVolume (more complex setup)
          # - name: app-code # Requires a PVC named 'app-code-pvc' with the code
          #   mountPath: /app
          #   readOnly: true # If code doesn't change

          # Mount a volume for logs (e.g., using emptyDir for ephemeral logs)
          - name: log-volume
            mountPath: /app/logs
        # Liveness probe: Check if the container is running
        livenessProbe:
          tcpSocket:
            port: http-admin # Check the container port
          initialDelaySeconds: 15 # Wait before first probe
          periodSeconds: 20   # Check every 20 seconds
        # Readiness probe: Check if the container is ready to serve traffic
        readinessProbe:
          tcpSocket:
            port: http-admin
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
        # Define the log volume (emptyDir is ephemeral, tied to pod lifecycle)
        - name: log-volume
          emptyDir: {}

        # If using Option 2 for code mounting:
        # - name: app-code
        #   persistentVolumeClaim:
        #     claimName: app-code-pvc # You would need to create this PVC separately

