# nginx.conf - Enhanced Configuration

user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024; # Increased slightly
    # multi_accept on;
}

http {
    ##
    # Basic Settings
    ##
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off; # Hide Nginx version

    # Define path for GeoIP databases if used (e.g., for location-based blocking)
    # geoip_country /usr/share/GeoIP/GeoIP.dat;
    # geoip_city    /usr/share/GeoIP/GeoLiteCity.dat;

    # Optional: Map for blocking based on GeoIP
    # map $geoip_country_code $allowed_country {
    #    default yes;
    #    # Example: Block specific countries
    #    # CN no;
    #    # RU no;
    # }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # SSL Settings (Uncomment and configure for HTTPS)
    ##
    # Note: Obtain certificates using Let's Encrypt (Certbot) or other provider.
    # ssl_certificate /etc/nginx/certs/your_domain.fullchain.pem; # Path to your cert + chain
    # ssl_certificate_key /etc/nginx/certs/your_domain.privkey.pem; # Path to your private key

    # ssl_protocols TLSv1.2 TLSv1.3; # Use modern, secure protocols
    # ssl_prefer_server_ciphers on;
    # ssl_dhparam /etc/nginx/dhparam.pem; # Generate using: openssl dhparam -out /etc/nginx/dhparam.pem 4096
    # Modern Cipher Suite Recommendation (Example - Check current best practices)
    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 1d;
    # ssl_session_tickets off; # Improves forward secrecy

    # HSTS (HTTP Strict Transport Security) - Uncomment after confirming HTTPS works correctly
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # OCSP Stapling - Improves performance and privacy
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # ssl_trusted_certificate /etc/nginx/certs/your_domain.chain.pem; # Path to intermediate+root chain
    # resolver 8.8.8.8 1.1.1.1 valid=300s; # Use reliable DNS resolvers
    # resolver_timeout 5s;

    ##
    # Logging Settings
    ##
    # Use a more detailed log format, e.g., including $request_time
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time ua_parse_bot=$upstream_http_x_ua_bot'; # Add custom headers if needed

    access_log /var/log/nginx/access.log detailed; # Use the detailed format
    error_log /var/log/nginx/error.log warn; # Log warnings and above

    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_disable "msie6";

    ##
    # Rate Limiting Zones
    ##
    # General API/Site Limit (Adjust rate/burst based on traffic)
    limit_req_zone $binary_remote_addr zone=sitelimit:10m rate=10r/s;
    # Stricter limit for potentially heavier actions (e.g., searches, form submissions - apply in specific locations)
    limit_req_zone $binary_remote_addr zone=actionlimit:10m rate=10r/m;
    # Tarpit/Bot Limit (Very slow)
    limit_req_zone $binary_remote_addr zone=botslowdown:10m rate=5r/m; # 5 requests per minute

    ##
    # Lua Settings
    ##
    lua_package_path "/etc/nginx/lua/?.lua;;";
    # lua_package_cpath "/usr/local/lib/lua/5.1/?.so;;"; # Adjust if needed for C libraries
    lua_shared_dict blocklist_cache 1m; # Small cache for blocklist results (optional, Redis is fast)
    lua_code_cache on; # Keep enabled for performance

    ##
    # Virtual Host Configs
    ##
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        # Uncomment for HTTPS:
        # listen 443 ssl http2 default_server;
        # listen [::]:443 ssl http2 default_server;

        # ssl_certificate /etc/nginx/certs/your_domain.fullchain.pem; # Repeat for server block
        # ssl_certificate_key /etc/nginx/certs/your_domain.privkey.pem;

        server_name _; # Or your specific domain name(s) e.g., example.com www.example.com

        root /var/www/html;
        index index.html index.htm;

        access_log /var/log/nginx/access.log detailed; # Use detailed log format here too

        # --- Enhanced Security Headers ---
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always; # Recommended
        add_header Permissions-Policy "interest-cohort=()" always; # Disable FLoC
        # Content-Security-Policy (CSP) - Start strict and loosen as needed. Requires careful testing.
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self'; connect-src 'self';" always;

        # Optional: GeoIP Blocking (Uncomment if GeoIP module is configured)
        # if ($allowed_country = no) {
        #     return 444; # Or 403
        # }

        # --- Lua Request Processing ---
        # Order is important: Blocklist -> Heuristics

        # Blocklist Check (uses check_blocklist.lua)
        access_by_lua_file /etc/nginx/lua/check_blocklist.lua;

        # Bot Detection Heuristics (uses detect_bot.lua - runs only if NOT blocked)
        access_by_lua_file /etc/nginx/lua/detect_bot.lua;

        # --- Main Application Routes ---

        # Serve static documentation files
        location /docs/ {
            limit_req zone=sitelimit burst=20 nodelay; # Allow bursts for static assets
            try_files $uri $uri/ =404;
        }

        # Serve rotating archives (potentially targeted by bots)
        location /docs/archives/ {
            limit_req zone=botslowdown burst=5; # Apply stricter limit here
            try_files $uri =404;
            # Optional: Add header to prevent indexing
            add_header X-Robots-Tag "noindex, nofollow";
        }

        # --- Proxy Backend Services ---

        # Proxy Admin UI
        location /admin/ {
            limit_req zone=actionlimit burst=10 nodelay; # Stricter limit for admin area
            # Basic Auth Example (Replace with stronger auth for production)
            # auth_basic "Admin Area";
            # auth_basic_user_file /etc/nginx/htpasswd; # Create with htpasswd utility

            proxy_pass http://admin_ui:5002/; # Service name from docker-compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 90s; # Allow longer timeouts if admin tasks take time
        }

        # Proxy Tarpit API (Internal - Called by Lua)
        location /api/tarpit {
            internal; # Make this location only accessible internally via ngx.exec
            limit_req zone=botslowdown burst=2; # Even stricter limit for internal endpoint

            proxy_pass http://tarpit_api:8001/tarpit; # Target the specific tarpit endpoint
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr; # Pass original IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Add headers potentially checked by backend (if any)
            # proxy_set_header User-Agent $http_user_agent; # Pass original UA
            proxy_http_version 1.1;
            proxy_set_header Connection ""; # Avoid keep-alive issues with slow backend
            proxy_read_timeout 300s; # Long timeout for tarpit response
        }

        # --- Location for general proxied app (Example - if you have one) ---
        # location / {
        #     limit_req zone=sitelimit burst=10 nodelay;
        #     proxy_pass http://your_main_app:port; # Replace with your actual app
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # --- Deny Access to Sensitive Files/Paths ---
        location ~ /\. { deny all; } # Deny access to hidden files (.htaccess, .git, .env etc)
        location ~* /(config|models|secrets)/ { deny all; } # Deny access to potentially sensitive backend folders
        location = /robots.txt { log_not_found off; access_log off; } # Serve robots.txt efficiently
        location = /favicon.ico { log_not_found off; access_log off; }

        # --- Custom Error Pages (Optional) ---
        error_page 403 /403_forbidden.html;
        location = /403_forbidden.html {
            root /var/www/html/errors; # Define path for custom error pages
            internal;
        }
        error_page 404 /404_not_found.html;
        location = /404_not_found.html {
            root /var/www/html/errors;
            internal;
        }
        error_page 500 502 503 504 /50x_error.html;
        location = /50x_error.html {
            root /var/www/html/errors;
            internal;
        }
    }

    # Add other server blocks if hosting multiple sites
}

# Ensure this file ends with a newline character
