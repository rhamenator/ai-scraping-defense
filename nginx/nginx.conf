user www-data;
worker_processes auto;
pid /run/nginx.pid;
# For Docker, modules are often compiled in or loaded differently than system Nginx
# include /etc/nginx/modules-enabled/*.conf; # This might not be needed or correct for OpenResty/Nginx in Docker

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # SSL Settings (example, uncomment and configure if using HTTPS)
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_prefer_server_ciphers on;
    # ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
    # ssl_session_tickets off;
    # ssl_dhparam /etc/nginx/certs/dhparam.pem; # Path to your DH params file (mounted from ./certs/)

    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time ua="$http_user_agent"';

    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # Update environment variable references
    upstream ai_service {
        server ai_service:${AI_SERVICE_PORT};
    }

    upstream escalation_engine {
        server escalation_engine:${ESCALATION_ENGINE_PORT};
    }

    upstream tarpit_api {
        server tarpit_api:${TARPIT_API_PORT};
    }

    upstream admin_ui {
        server admin_ui:${ADMIN_UI_PORT};
    }
    
    # REAL_BACKEND_HOST is handled in Lua script, not as an upstream here.
    # If REAL_BACKEND_HOST is a hostname or IP, Lua will use it directly.
    # For REAL_BACKEND_HOST, it's passed as an env var to Lua.
    # If you wanted Nginx to proxy to it directly without Lua intervention for some paths,
    # you'd need to handle its value (e.g., using resolver if it's a hostname that needs DNS lookup,
    # or directly if it's an IP or another Docker service name).
    # For this setup, Lua handles setting the proxy target.

    # Lua settings
    lua_package_path "/etc/nginx/lua/?.lua;;"; # Path to your Lua scripts
    lua_shared_dict blocklist_cache 10m; # Example shared dictionary if needed by Lua scripts

    # Ensure Nginx can resolve Docker service names if not using localhost
    resolver 127.0.0.11 valid=30s; # Docker's internal DNS resolver

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name localhost _; # Listen on localhost and any other hostname

        # Optional: Redirect HTTP to HTTPS (Uncomment and configure SSL below if using HTTPS)
        # if ($http_x_forwarded_proto != "https") {
        #     return 301 https://$host$request_uri;
        # }

        # Standard security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Robots.txt - Nginx serves the one mounted from ./config/robots.txt
        location = /robots.txt {
            alias /etc/nginx/robots.txt; # Path where ./config/robots.txt is mounted in the container
            access_log off;
            log_not_found off;
        }

        # Serve generated ZIP archives (honeypots)
        location /docs/archives/ {
            alias /usr/share/nginx/html/archives/; # Path where ./archives is mounted
            autoindex off;
        }

        # Custom error pages (optional, if you have them in ./nginx/errors and mount them)
        # error_page 403 /errors/403_forbidden.html;
        # location /errors/ {
        #     root /usr/share/nginx/html; # Assuming ./nginx/errors mounted to /usr/share/nginx/html/errors
        #     internal;
        # }

        # Lua script for initial IP blocklist check
        # This runs BEFORE bot detection for efficiency
        access_by_lua_file /etc/nginx/lua/check_blocklist.lua;

        # Admin UI - Now with Authentication
        location /admin/ {
            auth_basic "Admin Area - Restricted";
            auth_basic_user_file /etc/nginx/secrets/.htpasswd; # Path to the mounted .htpasswd file

            proxy_pass http://admin_ui_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Tarpit API (internal redirect target)
        location /api/tarpit {
            internal; # Only accessible via Nginx internal redirects
            proxy_pass http://tarpit_api_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Main content / Proxy to real backend
        location / {
            set $lua_proxy_pass_upstream ''; # Initialize variable for Lua
            # Lua script for bot detection and routing.
            # This script will decide to proxy to REAL_BACKEND_HOST or redirect to /api/tarpit
            # It reads REAL_BACKEND_HOST from environment variable.
            # It reads robots.txt from /etc/nginx/robots.txt (mounted from ./config/robots.txt)
            access_by_lua_file /etc/nginx/lua/detect_bot.lua;

            # If Lua script set an upstream, use it
            if ($lua_proxy_pass_upstream ~* "^http") {
                proxy_pass $lua_proxy_pass_upstream;
            }
            # If Lua script did NOT set an upstream (e.g., request was allowed but REAL_BACKEND_HOST was empty or invalid for Lua)
            # Nginx would typically return a 502 here if no other proxy_pass is defined.
            # Ensure detect_bot.lua always results in an action (sets upstream, calls ngx.exit, or ngx.exec).
            # If detect_bot.lua is supposed to allow some requests to pass through without setting an upstream,
            # you might need a default proxy_pass here, but it's cleaner if Lua handles all outcomes.

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTPS server block (Example - uncomment and configure if using SSL)
    # server {
    #     listen 443 ssl http2 default_server;
    #     listen [::]:443 ssl http2 default_server;
    #     server_name localhost _; # Or your specific domain

    #     ssl_certificate /etc/nginx/certs/tls.crt;       # Mounted from ./certs/
    #     ssl_certificate_key /etc/nginx/certs/tls.key;  # Mounted from ./certs/
    #     ssl_dhparam /etc/nginx/certs/dhparam.pem;      # Mounted from ./certs/

    #     # Include the same locations as the HTTP server block,
    #     # ensuring /admin/ auth is present, and Lua scripts are referenced correctly.
    #     # You might want to use 'include' directives to avoid duplicating location blocks.
    # }
}
