# example_main_website_nginx.conf
# Example Nginx configuration for the *main website's* server.
# This configuration proxies all incoming traffic TO the anti_scrape Nginx service.

server {
    listen 80 default_server; # Listen on HTTP
    # listen [::]:80 default_server;

    # If terminating TLS here (recommended):
    listen 443 ssl http2 default_server;
    # listen [::]:443 ssl http2 default_server;
    server_name your-website.com www.your-website.com; # Replace with your domain

    # SSL Configuration (Paths to your main website's certificates)
    # ssl_certificate /etc/letsencrypt/live/your-website.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/your-website.com/privkey.pem;
    # ssl_trusted_certificate /etc/letsencrypt/live/your-website.com/chain.pem; # For OCSP Stapling
    # include /etc/nginx/snippets/ssl-params.conf; # Include common strong SSL settings

    access_log /var/log/nginx/main-website.access.log;
    error_log /var/log/nginx/main-website.error.log warn;

    # Optional: Redirect HTTP to HTTPS
    # if ($scheme = http) {
    #     return 301 https://$host$request_uri;
    # }

    location / {
        # --- Proxy to Anti-Scrape Stack ---
        # Replace 'anti-scrape.your-internal-dns.local' or '10.0.5.10'
        # with the actual address/hostname where the anti_scrape Nginx
        # service is reachable from this main web server.
        # Use 'https' if the anti_scrape Nginx terminates TLS, 'http' otherwise.

        proxy_pass https://anti-scrape.your-internal-dns.local:443; # Example using internal DNS and HTTPS port
        # OR
        # proxy_pass http://10.0.5.10:80; # Example using internal IP and HTTP port

        # --- Standard Proxy Headers ---
        # These forward essential client information to the anti_scrape stack
        # and subsequently to the real backend application.
        proxy_set_header Host $host; # Forward the original host header
        proxy_set_header X-Real-IP $remote_addr; # Forward the client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Append IPs if already proxied
        proxy_set_header X-Forwarded-Proto $scheme; # Forward the original protocol (http/https)
        proxy_set_header X-Forwarded-Host $host; # Forward original host (redundant but common)
        proxy_set_header X-Forwarded-Port $server_port; # Forward original port

        # --- Proxy Settings ---
        proxy_http_version 1.1; # Use HTTP/1.1 for upstream connections
        proxy_set_header Upgrade $http_upgrade; # Support WebSocket upgrades
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 120s; # Adjust timeout as needed
        proxy_connect_timeout 5s;
        proxy_buffering on; # Usually enabled for standard web traffic
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    # Optional: Add specific locations for health checks, static assets served
    # directly by this Nginx instance, etc., if needed *before* the proxy_pass.
    # location /health { access_log off; return 200 "OK"; }
}