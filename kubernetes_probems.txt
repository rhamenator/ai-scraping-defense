kubernetes_probems.txt
[{
	"resource": "/d:/anti-scraping-defense/kubernetes/ai-service-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#152",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 38,
	"startColumn": 7,
	"endLineNumber": 38,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/ai-service-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#154",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 38,
	"startColumn": 7,
	"endLineNumber": 38,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/ai-service-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#152",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 39,
	"startColumn": 9,
	"endLineNumber": 39,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/ai-service-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#154",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 39,
	"startColumn": 9,
	"endLineNumber": 39,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/ai-service-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#152",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 51,
	"startColumn": 13,
	"endLineNumber": 51,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/ai-service-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#154",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 51,
	"startColumn": 13,
	"endLineNumber": 51,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/ai-service-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#154",
	"code": "C-0012",
	"severity": 4,
	"message": "Applications credentials in configuration files\n_______________________________________________\n\nDescription: Attackers who have access to configuration files can steal the stored secrets and use them. This control checks if ConfigMaps or pod specifications have sensitive information in their configuration.\n\nRemediation: Use Kubernetes secrets or Key Management Systems to store credentials.\n",
	"source": "kubescape",
	"startLineNumber": 55,
	"startColumn": 13,
	"endLineNumber": 55,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#156",
	"code": "C-0076",
	"severity": 4,
	"message": "Label usage for resources\n_________________________\n\nDescription: It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.\n\nRemediation: Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.\n",
	"source": "kubescape",
	"startLineNumber": 35,
	"startColumn": 9,
	"endLineNumber": 35,
	"endColumn": 12
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#156",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 38,
	"startColumn": 7,
	"endLineNumber": 38,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#158",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 38,
	"startColumn": 7,
	"endLineNumber": 38,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#156",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 39,
	"startColumn": 9,
	"endLineNumber": 39,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#158",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 39,
	"startColumn": 9,
	"endLineNumber": 39,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#156",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 51,
	"startColumn": 13,
	"endLineNumber": 51,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#158",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 51,
	"startColumn": 13,
	"endLineNumber": 51,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#158",
	"code": "C-0012",
	"severity": 4,
	"message": "Applications credentials in configuration files\n_______________________________________________\n\nDescription: Attackers who have access to configuration files can steal the stored secrets and use them. This control checks if ConfigMaps or pod specifications have sensitive information in their configuration.\n\nRemediation: Use Kubernetes secrets or Key Management Systems to store credentials.\n",
	"source": "kubescape",
	"startLineNumber": 55,
	"startColumn": 13,
	"endLineNumber": 55,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#156",
	"code": "C-0056",
	"severity": 4,
	"message": "Configured liveness probe\n_________________________\n\nDescription: Liveness probe is intended to ensure that workload remains healthy during its entire execution lifecycle, or otherwise restrat the container. It is highly recommended to define liveness probe for every worker container. This control finds all the pods where the Liveness probe is not configured.\n\nRemediation: Ensure Liveness probes are configured wherever possible.\n",
	"source": "kubescape",
	"startLineNumber": 80,
	"startColumn": 9,
	"endLineNumber": 80,
	"endColumn": 22
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/escalation-engine-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#156",
	"code": "C-0018",
	"severity": 4,
	"message": "Configured readiness probe\n__________________________\n\nDescription: Readiness probe is intended to ensure that workload is ready to process network traffic. It is highly recommended to define readiness probe for every worker container. This control finds all the pods where the readiness probe is not configured.\n\nRemediation: Ensure Readiness probes are configured wherever possible.\n",
	"source": "kubescape",
	"startLineNumber": 84,
	"startColumn": 9,
	"endLineNumber": 84,
	"endColumn": 23
},{
	"resource": "/D:/anti-scraping-defense/kubernetes/markov-model-trainer.yaml",
	"owner": "_generated_diagnostic_collection_name_#160",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 20,
	"startColumn": 11,
	"endLineNumber": 20,
	"endColumn": 18
},{
	"resource": "/D:/anti-scraping-defense/kubernetes/markov-model-trainer.yaml",
	"owner": "_generated_diagnostic_collection_name_#160",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 21,
	"startColumn": 13,
	"endLineNumber": 21,
	"endColumn": 18
},{
	"resource": "/D:/anti-scraping-defense/kubernetes/markov-model-trainer.yaml",
	"owner": "_generated_diagnostic_collection_name_#160",
	"code": "C-0012",
	"severity": 4,
	"message": "Applications credentials in configuration files\n_______________________________________________\n\nDescription: Attackers who have access to configuration files can steal the stored secrets and use them. This control checks if ConfigMaps or pod specifications have sensitive information in their configuration.\n\nRemediation: Use Kubernetes secrets or Key Management Systems to store credentials.\n",
	"source": "kubescape",
	"startLineNumber": 33,
	"startColumn": 17,
	"endLineNumber": 33,
	"endColumn": 22
},{
	"resource": "/D:/anti-scraping-defense/kubernetes/markov-model-trainer.yaml",
	"owner": "_generated_diagnostic_collection_name_#160",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 33,
	"startColumn": 17,
	"endLineNumber": 33,
	"endColumn": 22
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/nginx-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#162",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 39,
	"startColumn": 43,
	"endLineNumber": 39,
	"endColumn": 50
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/nginx-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#162",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 281,
	"startColumn": 7,
	"endLineNumber": 281,
	"endColumn": 11
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/nginx-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#162",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 308,
	"startColumn": 9,
	"endLineNumber": 308,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/postgres-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#164",
	"code": "C-0076",
	"severity": 4,
	"message": "Label usage for resources\n_________________________\n\nDescription: It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.\n\nRemediation: Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.\n",
	"source": "kubescape",
	"startLineNumber": 8,
	"startColumn": 5,
	"endLineNumber": 8,
	"endColumn": 8
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/postgres-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#164",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 36,
	"startColumn": 7,
	"endLineNumber": 36,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/postgres-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#164",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 37,
	"startColumn": 9,
	"endLineNumber": 37,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/postgres-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#164",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 53,
	"startColumn": 11,
	"endLineNumber": 53,
	"endColumn": 16
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/postgres-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#164",
	"code": "C-0012",
	"severity": 4,
	"message": "Applications credentials in configuration files\n_______________________________________________\n\nDescription: Attackers who have access to configuration files can steal the stored secrets and use them. This control checks if ConfigMaps or pod specifications have sensitive information in their configuration.\n\nRemediation: Use Kubernetes secrets or Key Management Systems to store credentials.\n",
	"source": "kubescape",
	"startLineNumber": 55,
	"startColumn": 11,
	"endLineNumber": 55,
	"endColumn": 16
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/redis-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#166",
	"code": "C-0076",
	"severity": 4,
	"message": "Label usage for resources\n_________________________\n\nDescription: It is recommended to set labels that identify semantic attributes of your application or deployment. For example, { app: myapp, tier: frontend, phase: test, deployment: v3 }. These labels can used to assign policies to logical groups of the deployments as well as for presentation and tracking purposes. This control helps you find deployments without any of the expected labels.\n\nRemediation: Define labels that are most suitable to your needs of use the exceptions to prevent further notifications.\n",
	"source": "kubescape",
	"startLineNumber": 16,
	"startColumn": 9,
	"endLineNumber": 16,
	"endColumn": 12
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/redis-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#166",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 20,
	"startColumn": 7,
	"endLineNumber": 20,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/redis-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#166",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 20,
	"startColumn": 9,
	"endLineNumber": 20,
	"endColumn": 13
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/redis-statefulset.yaml",
	"owner": "_generated_diagnostic_collection_name_#166",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 21,
	"startColumn": 9,
	"endLineNumber": 21,
	"endColumn": 14
}]
[{
	"resource": "/d:/anti-scraping-defense/kubernetes/robots-fetcher-cronjob.yaml",
	"owner": "_generated_diagnostic_collection_name_#168",
	"code": "C-0037",
	"severity": 4,
	"message": "CoreDNS poisoning\n_________________\n\nDescription: If attackers have permissions to modify the coredns ConfigMap they can change the behavior of the cluster’s DNS, poison it, and override the network identity of other services. This control identifies all subjects allowed to update the 'coredns' configmap.\n\nRemediation: You should follow the least privilege principle. Monitor and approve all the subjects allowed to modify the 'coredns' configmap. It is also recommended to remove this permission from the users/service accounts used in the daily operations.\n",
	"source": "kubescape",
	"startLineNumber": 34,
	"startColumn": 3,
	"endLineNumber": 34,
	"endColumn": 7
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/robots-fetcher-cronjob.yaml",
	"owner": "_generated_diagnostic_collection_name_#168",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 51,
	"startColumn": 11,
	"endLineNumber": 51,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/robots-fetcher-cronjob.yaml",
	"owner": "_generated_diagnostic_collection_name_#168",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 52,
	"startColumn": 13,
	"endLineNumber": 52,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/robots-fetcher-cronjob.yaml",
	"owner": "_generated_diagnostic_collection_name_#168",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 64,
	"startColumn": 17,
	"endLineNumber": 64,
	"endColumn": 22
}]
[{
	"resource": "/d:/anti-scraping-defense/kubernetes/tarpit-api-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#172",
	"code": "C-0055",
	"severity": 4,
	"message": "Linux hardening\n_______________\n\nDescription: Containers may be given more privileges than they actually need. This can increase the potential impact of a container compromise.\n\nRemediation: You can use AppArmor, Seccomp, SELinux and Linux Capabilities mechanisms to restrict containers abilities to utilize unwanted privileges.\n",
	"source": "kubescape",
	"startLineNumber": 38,
	"startColumn": 7,
	"endLineNumber": 38,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/tarpit-api-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#172",
	"code": "C-0078",
	"severity": 4,
	"message": "Images from allowed registry\n____________________________\n\nDescription: This control is intended to ensure that all the used container images are taken from the authorized repositories. It allows user to list all the approved repositories and will fail all the images taken from any repository outside of this list.\n\nRemediation: You should enable all trusted repositories in the parameters of this control.\n",
	"source": "kubescape",
	"startLineNumber": 39,
	"startColumn": 9,
	"endLineNumber": 39,
	"endColumn": 14
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/tarpit-api-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#172",
	"code": "C-0211",
	"severity": 4,
	"message": "Apply Security Context to Your Pods and Containers\n__________________________________________________\n\nDescription: Apply Security Context to Your Pods and Containers\n\nRemediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n",
	"source": "kubescape",
	"startLineNumber": 51,
	"startColumn": 13,
	"endLineNumber": 51,
	"endColumn": 18
},{
	"resource": "/d:/anti-scraping-defense/kubernetes/tarpit-api-deployment.yaml",
	"owner": "_generated_diagnostic_collection_name_#172",
	"code": "C-0012",
	"severity": 4,
	"message": "Applications credentials in configuration files\n_______________________________________________\n\nDescription: Attackers who have access to configuration files can steal the stored secrets and use them. This control checks if ConfigMaps or pod specifications have sensitive information in their configuration.\n\nRemediation: Use Kubernetes secrets or Key Management Systems to store credentials.\n",
	"source": "kubescape",
	"startLineNumber": 53,
	"startColumn": 13,
	"endLineNumber": 53,
	"endColumn": 18
}]