# Generate-Secrets.ps1 (Updated for Kubernetes)
#
# This script creates a single, ready-to-use Kubernetes secrets manifest.
# It generates strong random passwords, creates Nginx htpasswd credentials,
# base64-encodes all values, assembles them into one YAML file, and
# outputs the generated credentials to the console for the administrator.

# --- Configuration ---
# Ensure the 'kubernetes' directory exists
$K8sDir = Join-Path $PSScriptRoot "kubernetes"
if (-not (Test-Path $K8sDir)) {
    New-Item -ItemType Directory -Path $K8sDir | Out-Null
}
$OutputFile = Join-Path $K8sDir "secrets.yaml"

# --- Functions ---
# Function to generate a strong, random password
function New-RandomPassword {
    param(
        [int]$Length = 24
    )
    $specialChars = '!@#$%^&*'
    $passwordChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' + $specialChars
    $random = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
    $bytes = New-Object byte[] $Length
    $random.GetBytes($bytes)
    $password = -join ($bytes | ForEach-Object { $passwordChars[$_ % $passwordChars.Length] })
    # Ensure at least one special character is present
    if ($password -notmatch "[$([regex]::Escape($specialChars))]") {
        $password = $password.Substring(0, $Length - 1) + $specialChars[(Get-Random -Minimum 0 -Maximum $specialChars.Length)]
    }
    return $password
}

# Function to Base64-encode a string
function ConvertTo-Base64 {
    param(
        [string]$InputString
    )
    $bytes = [System.Text.Encoding]::UTF8.GetBytes($InputString)
    return [System.Convert]::ToBase64String($bytes)
}

# --- Main Logic ---
Write-Host "Generating secrets for Kubernetes..."

# 1. Generate all required secret values
$postgresUser = "postgres"
$postgresDb = "markov_db"
$postgresPassword = New-RandomPassword
$redisPassword = New-RandomPassword

# Use the current user's name for the admin UI for better security
$adminUiUsername = $env:USERNAME
if ([string]::IsNullOrEmpty($adminUiUsername)) {
    $adminUiUsername = "defense-admin" # Fallback for environments without a username
}

$adminUiPassword = New-RandomPassword
$systemSeed = New-RandomPassword -Length 48
$externalApiKey = New-RandomPassword
$ipReputationApiKey = New-RandomPassword
$communityBlocklistApiKey = New-RandomPassword
$smtpPassword = New-RandomPassword

# 2. Generate Nginx .htpasswd secret
$nginxUsername = $adminUiUsername # Use the same username for consistency
$nginxPassword = New-RandomPassword -Length 32
# Create the SHA1 hash of the password and then Base64 encode it (this is the htpasswd format)
$sha1 = [System.Security.Cryptography.SHA1]::Create()
$passwordBytes = [System.Text.Encoding]::UTF8.GetBytes($nginxPassword)
$hashBytes = $sha1.ComputeHash($passwordBytes)
$hash_b64 = [System.Convert]::ToBase64String($hashBytes)
# This is the final line that goes inside the .htpasswd file
$htpasswdFileContent = "${nginxUsername}:{SHA}${hash_b64}"


# 3. Base64-encode all values for Kubernetes Secret data
$postgresUser_b64 = ConvertTo-Base64 $postgresUser
$postgresDb_b64 = ConvertTo-Base64 $postgresDb
$postgresPassword_b64 = ConvertTo-Base64 $postgresPassword
$redisPassword_b64 = ConvertTo-Base64 $redisPassword
$adminUiUsername_b64 = ConvertTo-Base64 $adminUiUsername
$adminUiPassword_b64 = ConvertTo-Base64 $adminUiPassword
$systemSeed_b64 = ConvertTo-Base64 $systemSeed
$externalApiKey_b64 = ConvertTo-Base64 $externalApiKey
$ipReputationApiKey_b64 = ConvertTo-Base64 $ipReputationApiKey
$communityBlocklistApiKey_b64 = ConvertTo-Base64 $communityBlocklistApiKey
$smtpPassword_b64 = ConvertTo-Base64 $smtpPassword
# We must also Base64-encode the entire .htpasswd file content for the K8s secret
$htpasswdFileContent_b64 = ConvertTo-Base64 $htpasswdFileContent


# 4. Assemble the YAML content using a Here-String
$yamlContent = @"
# kubernetes/secrets.yaml
#
# GENERATED BY SCRIPT - DO NOT EDIT MANUALLY
# This file contains sensitive data. DO NOT commit it to version control.
# Ensure 'kubernetes/secrets.yaml' is in your .gitignore file.
#
# To apply, run: kubectl apply -f kubernetes/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: ai-defense
type: Opaque
data:
  POSTGRES_USER: $postgresUser_b64
  POSTGRES_DB: $postgresDb_b64
  POSTGRES_PASSWORD: $postgresPassword_b64
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: ai-defense
type: Opaque
data:
  REDIS_PASSWORD: $redisPassword_b64
---
apiVersion: v1
kind: Secret
metadata:
  name: admin-ui-credentials
  namespace: ai-defense
type: Opaque
data:
  ADMIN_UI_USERNAME: $adminUiUsername_b64
  ADMIN_UI_PASSWORD: $adminUiPassword_b64
---
apiVersion: v1
kind: Secret
metadata:
  name: system-seed-secret
  namespace: ai-defense
type: Opaque
data:
  SYSTEM_SEED: $systemSeed_b64
---
apiVersion: v1
kind: Secret
metadata:
  name: external-api-keys
  namespace: ai-defense
type: Opaque
data:
  EXTERNAL_API_KEY: $externalApiKey_b64
  IP_REPUTATION_API_KEY: $ipReputationApiKey_b64
  COMMUNITY_BLOCKLIST_API_KEY: $communityBlocklistApiKey_b64
  SMTP_PASSWORD: $smtpPassword_b64
---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-auth
  namespace: ai-defense
type: Opaque
data:
  # This secret contains the content for the .htpasswd file, which is used
  # by Nginx for HTTP Basic Authentication.
  .htpasswd: $htpasswdFileContent_b64
"@

# 5. Write the YAML content to the output file
Set-Content -Path $OutputFile -Value $yamlContent -Encoding UTF8

Write-Host "Successfully created Kubernetes secrets file at:"
Write-Host $OutputFile -ForegroundColor Green
Write-Host "------------------------------------------------------------" -ForegroundColor Yellow
Write-Host "IMPORTANT: Save the following credentials in a secure place!" -ForegroundColor Yellow
Write-Host "------------------------------------------------------------" -ForegroundColor Yellow

# 6. Output the generated secrets for the user to save
Write-Host ""
Write-Host "NGINX / Admin UI Credentials (for browser access):" -ForegroundColor Cyan
Write-Host "  Username: " -NoNewline; Write-Host $nginxUsername -ForegroundColor White
Write-Host "  Password: " -NoNewline; Write-Host $nginxPassword -ForegroundColor White
Write-Host ""
Write-Host "Service Passwords & Keys (for config and troubleshooting):" -ForegroundColor Cyan
Write-Host "  PostgreSQL Password:" -NoNewline; Write-Host " $postgresPassword" -ForegroundColor White
Write-Host "  Redis Password:     " -NoNewline; Write-Host " $redisPassword" -ForegroundColor White
Write-Host "  System Seed:        " -NoNewline; Write-Host " $systemSeed" -ForegroundColor White
Write-Host ""
Write-Host "------------------------------------------------------------" -ForegroundColor Yellow
Write-Host "After saving these values, clear your screen history." -ForegroundColor Yellow
Write-Host "Remember to add 'kubernetes/secrets.yaml' to your .gitignore file."

